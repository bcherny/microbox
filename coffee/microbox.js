// Generated by CoffeeScript 1.6.3
var contains, microbox, parent, template;

contains = function(haystack, needle) {
  return haystack.indexOf(needle > -1);
};

parent = function(element, filter) {
  var count, e, f, good, property, _continue;
  if (izzy['function'](filter)) {
    while (_continue(element)) {
      if (filter(element)) {
        return element;
      }
      element = element.parentNode;
    }
  } else {
    while (_continue(element)) {
      good = 0;
      count = 0;
      for (property in filter) {
        e = element[property];
        f = filter[property];
        if (contains(element[property], filter[property])) {
          ++good;
        }
        ++count;
      }
      if (count === good) {
        return element;
      }
      element = element.parentNode;
    }
  }
  _continue = function(element) {
    return !izzy.defined(element.documentElement) && element.tagName !== 'HTML';
  };
  return false;
};

template = {
  caption: function(data) {
    return "<div class=\"caption\"><span class=\"caption-trigger\">i</span>" + data.caption + "</div>";
  },
  image: function(data) {
    return "<img src=\"" + data.src + "\" alt=\"" + data.setId + "\" " + (data.last ? ' class="cur"' : '') + " />";
  },
  lightbox: function(data) {
    var cap, captions, images, n, src, _i, _j, _len, _len1, _ref, _ref1;
    images = '';
    _ref = data.images;
    for (n = _i = 0, _len = _ref.length; _i < _len; n = ++_i) {
      src = _ref[n];
      images += template.image({
        last: n === data.images.length,
        setId: data.setId,
        src: src
      });
    }
    captions = '';
    _ref1 = data.captions;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      cap = _ref1[_j];
      captions += template.caption({
        caption: cap
      });
    }
    return "<div class=\"microbox\">\n	<div class=\"inner\">\n		" + images + "\n	</div>\n	" + captions + "\n</div>";
  }
};

microbox = (function() {
  var counter, getId, html, model, toggle, triggers;
  counter = -1;
  model = new umodel({
    sets: {}
  });
  getId = function() {
    while (!(++counter in (model.get('sets')))) {
      return counter;
    }
  };
  toggle = function(set, index) {
    return console.log(set, index);
  };
  triggers = document.querySelectorAll('a[href][rel^="lightbox"]');
  _.each(triggers, function(trigger) {
    var href, id, index, parts, rel, set, title;
    href = trigger.getAttribute('href');
    rel = trigger.getAttribute('rel');
    title = trigger.getAttribute('title');
    parts = rel.split('[');
    if (parts[1]) {
      id = parts[1].slice(0, -1);
    } else {
      id = getId();
    }
    set = model.get("sets/" + id);
    if (set) {
      if ((set.triggers.indexOf(trigger)) < 0) {
        set.captions.push(title);
        set.images.push(href);
        set.triggers.push(trigger);
      }
    } else {
      model.set("sets/" + id, {
        captions: [title],
        images: [href],
        triggers: [trigger]
      });
    }
    set = model.get("sets/" + id);
    index = set.triggers.indexOf(trigger);
    return trigger.addEventListener('click', function(e) {
      e.preventDefault();
      return toggle(set, index);
    });
  });
  html = '';
  _.each(model.get('sets'), function(set) {
    return html += template.lightbox(set);
  });
  return document.body.innerHTML += html;
})();
