{
  "name": "umodel",
  "version": "0.0.5",
  "description": "Tiny, generic, fully tested model.",
  "main": "umodel.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/eighttrackmind/umodel.git"
  },
  "keywords": [
    "model",
    "mvc",
    "store",
    "storage",
    "key",
    "value",
    "deep"
  ],
  "author": {
    "name": "Boris Cherny",
    "email": "boris@performancejs.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/eighttrackmind/umodel/issues"
  },
  "scripts": {
    "test": "./node_modules/.bin/nodeunit test"
  },
  "devDependencies": {
    "grunt-contrib-coffee": "~0.7.0",
    "grunt-contrib-uglify": "~0.2.4",
    "grunt": "~0.4.1",
    "nodeunit": "~0.8.1",
    "grunt-umd": "~1.3.0",
    "grunt-contrib-nodeunit": "~0.2.2"
  },
  "testling": {
    "files": "test/test.js",
    "browsers": {
      "ie": [
        6,
        7,
        8,
        9
      ],
      "firefox": [
        "nightly",
        24,
        23,
        22,
        21,
        20
      ],
      "chrome": [
        "canary",
        30,
        25,
        20,
        15,
        10
      ],
      "safari": [
        6,
        5,
        4,
        3
      ],
      "opera": [
        "next",
        16,
        15,
        14,
        13,
        12
      ],
      "iphone": [
        6
      ],
      "ipad": [
        6
      ],
      "android": [
        4
      ]
    }
  },
  "readme": "# ÂµModel\n\n[![Build Status](https://travis-ci.org/eighttrackmind/umodel.png)](https://travis-ci.org/eighttrackmind/umodel.png)\n[![browser support](https://ci.testling.com/eighttrackmind/umodel.png)](https://ci.testling.com/eighttrackmind/umodel)\n\nTiny, generic, fully tested model.\n\n```coffee\nnew umodel [data], [options]\n```\n\n`data` {Object} initialize the model with some data\n\n`options` {Object}\n\n- `separator` (default: `/`) separator for getting/setting nested keys\n\n## API\n\n`umodel.`\n\n- `get key` get a key, throwing an error if a parent key is not set\n- `set key, value` set a key, lazy-creating parent keys along the way if nested\n- `setnx key, value` like `set`, but only if the given key has not been set yet\n- `on \"event1 [event2...], :[property]\", fn` call `fn` with `key, [value], [previousValue]` when an event is triggered\n- `trigger event, key` trigger an event set with `.on`\n\n## Usage\n\n```coffee\nModel = require 'umodel'\n\nmodel = new Model\n\tfoo: 'bar'\n#=> model\n\nmodel.get 'foo'\n#=> 'bar'\n\nmodel.set 'bar/baz', (beans) ->\n\t'stew'\n#=> [Function]\n\nmodel.get 'bar/baz'\n#=> [Function]\n\n# set only if the key \"tomato\" is not yet set.\nmodel.setnx 'tomato', 'potato'\n#=> \"potato\"\n\n# call the function `callback` when any property is read\ncallback = (key, value) -> ...\nmodel.on 'get', callback\n#=> undefined\n\n# call the function `callback` when `set` or `setnx` is called on `foo/bar` or any of its descendants (a more precisely specified version of the \"change\" event available in many mvc frameworks)\nmodel.on 'set setnx: foo/bar', (key, value, previousValue) -> ...\n#=> undefined\n\n# trigger `callback` by emulating a `set` event with the key `foo` (doesn't mutate the model, just triggers callbacks)\nmodel.trigger 'set', 'foo'\n#=> undefined\n```\n\n## Todo\n\n- Add `.off()` method",
  "_id": "umodel@0.0.5",
  "_from": "umodel@"
}
