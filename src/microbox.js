// Generated by CoffeeScript 1.6.3
var contains, microbox, parent, template,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

contains = function(haystack, needle) {
  return haystack.indexOf(needle > -1);
};

parent = function(element, filter) {
  var count, e, f, good, property, _continue;
  if (izzy['function'](filter)) {
    while (_continue(element)) {
      if (filter(element)) {
        return element;
      }
      element = element.parentNode;
    }
  } else {
    while (_continue(element)) {
      good = 0;
      count = 0;
      for (property in filter) {
        e = element[property];
        f = filter[property];
        if (contains(element[property], filter[property])) {
          ++good;
        }
        ++count;
      }
      if (count === good) {
        return element;
      }
      element = element.parentNode;
    }
  }
  _continue = function(element) {
    return !izzy.defined(element.documentElement) && element.tagName !== 'HTML';
  };
  return false;
};

template = {
  caption: function(data) {
    return "<div class=\"caption\"><span class=\"caption-trigger\">i</span>" + data.caption + "</div>";
  },
  image: function(data) {
    return "<img src=\"" + data.src + "\" alt=\"" + data.setId + "\" " + (data.last ? ' class="cur"' : '') + " />";
  },
  lightbox: function(data) {
    var cap, captions, images, n, src, _i, _j, _len, _len1, _ref, _ref1;
    images = '';
    _ref = data.images;
    for (n = _i = 0, _len = _ref.length; _i < _len; n = ++_i) {
      src = _ref[n];
      images += template.image({
        last: n === data.images.length,
        setId: data.setId,
        src: src
      });
    }
    captions = '';
    _ref1 = data.captions;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      cap = _ref1[_j];
      captions += template.caption({
        caption: cap
      });
    }
    return "<div class=\"inner\">\n	" + images + "\n</div>\n" + captions;
  }
};

microbox = (function() {
  var click, getTriggerSetId, initialize, model, process;
  model = new umodel({
    processed: [],
    ids: {},
    lightboxes: {}
  });
  process = function(trigger) {
    var processed;
    processed = model.get('processed');
    if (__indexOf.call(processed, trigger) >= 0) {
      return;
    }
    return processed.push(trigger);
  };
  getTriggerSetId = function(element) {
    var parts, rel;
    rel = element.rel;
    if (rel.indexOf('[') > -1) {
      parts = rel.split('[');
      return parts[1].slice(0, -1);
    } else {

    }
  };
  click = function(event) {
    var element, id, target;
    target = event.target;
    element = parent(target, {
      rel: 'lightbox'
    });
    if (lightbox) {
      return id = getTriggerSetId(element);
    }
  };
  initialize = function() {
    return document.addEventListener('click', click);
  };
  return {
    initialize: initialize
  };
})();
